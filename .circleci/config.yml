version: 2.1


executors:
  rust:
    environment:
      OASIS_BUILD_VERBOSE: 1
    docker:
      - image: oasislabs/rust:next
    resource_class: xlarge


commands:
  cache_oasis_build:
    steps:
      - checksum_oasis_build
      - save_cache:
          key: oasis-build-{{ checksum "oasis-build.sums" }}
          paths:
            - ~/.cargo/bin/oasis-build

  restore_oasis_build:
    steps:
      - checksum_oasis_build
      - restore_cache:
          keys:
            - oasis-build-{{ checksum "oasis-build.sums" }}

  checksum_oasis_build:
    steps:
      - run:
          name: Checksum oasis-build
          command: |
            find oasis-build/src -type f -name "*.rs" | \
              sort | xargs md5sum oasis-build/Cargo.toml > oasis-build.sums
            echo $(rustc --version) >> oasis-build.sums


jobs:
  init:
    executor: rust
    steps:
      - checkout
      - run:
          name: Rustfmt
          command: cargo fmt -- --check
      - restore_oasis_build
      - run:
          name: Build oasis-build
          command: |
            which oasis-build || \
              (cargo build -p oasis-build && cp target/debug/oasis-build ~/.cargo/bin)
      - cache_oasis_build
      - run:
          name: Unit test
          command: cargo test --all --exclude tests

  clippy:
    executor: rust
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Clippy
          command: |
            rustup component add clippy || exit 0
            cargo clippy --all-targets --all-features --all --exclude tests -- -D clippy::all
            cargo clippy -p tests --lib -- -D clippy::all

  wasm_build:
    executor: rust
    steps:
      - checkout
      - run:
          name: Wasm build
          command: cargo build --target wasm32-unknown-unknown --all-features -p memchain -p bcfs

  build_standalone_examples:
    executor: rust
    environment:
      RUSTC_WRAPPER: oasis-build
    steps:
      - checkout
      - restore_oasis_build
      - run:
          name: cargo build
          command: |
            RUSTC_WRAPPER=oasis-build cargo build --release --target=wasm32-wasi \
              -p ballot \
              -p erc20 \
              -p hello-world \
              -p messaging

  integration_tests:
    executor: rust
    environment:
      RUSTC_WRAPPER: oasis-build
    steps:
      - checkout
      - restore_oasis_build
      - run:
          name: Build services
          command: |
            cargo build -p tests --release --target wasm32-wasi --bin b
            cargo build -p tests --release --target wasm32-wasi --bins
      - run:
          name: Integration tests
          command: cargo test -p tests --lib

  codecov:
    machine: true
    steps:
      - checkout
      - run:
          name: Tarpaulin code coverage
          command: docker run --security-opt seccomp=unconfined -v "${PWD}:/volume" xd009642/tarpaulin cargo tarpaulin --ciserver circle-ci --coveralls $COVERALLS_REPO_TOKEN -p bcfs -p oasis-types --ignore-tests --exclude-files oasis-std --exclude-files memchain --exclude-files oasis-build --exclude-files oasis-rpc --exclude-files blockchain-traits


workflows:
  version: 2

  test:
    jobs:
      - init
      - clippy
      - wasm_build
      - codecov
      - integration_tests:
          requires:
            - init
      - build_standalone_examples:
          requires:
            - init
