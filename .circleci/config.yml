version: 2.1


executors:
  rust:
    environment:
      PATH: /root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      LD_LIBRARY_PATH: /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib
    docker:
      - image: oasislabs/rust:latest
    resource_class: xlarge

  rust_pending:
    environment:
      PATH: /root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      LD_LIBRARY_PATH: /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib
    docker:
      - image: oasislabs/rust:pending
    resource_class: xlarge

  docker_builder:
    environment:
      IMAGE_NAME: oasislabs/rust
    docker:
      - image: circleci/buildpack-deps:bionic


commands:
  restore_mantle_build:
    steps:
      - checksum_mantle_build
      - restore_cache:
          keys:
            - mantle-build-{{ checksum "mantle-build.sums" }}
      - install_mantle_build

  checksum_mantle_build:
    steps:
      - run:
          name: Checksum mantle-build
          command: find mantle-build/src -type f -name "*.rs" | sort | xargs md5sum -t mantle-build/Cargo.toml > mantle-build.sums

  install_mantle_build:
    steps:
      - run:
          name: Install mantle-build
          command: cp target/debug/mantle-build ~/.cargo/bin

  update_toolstate:
    steps:
      - checkout
      - run:
          name: Build mantle-build
          command: cargo build --release -p mantle-build
      - run:
          name: Push to S3 bucket
          command: |
            rustc_version=$(rustc --version | cut -d'(' -f 2 | cut -d')' -f 1 | tr ' ' '_')
            llvm_target=$(rustc --print sysroot | cut -d'-' -f2-)
            aws s3 cp target/release/mantle-build s3://mantle-framework/$rustc_version/$llvm_target/mantle-build

  docker_push:
    parameters:
      tag:
        type: string
    steps:
      - run:
          name: Push to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push oasislabs/rust:<< parameters.tag >>


jobs:
  init:
    executor: rust
    steps:
      - checkout
      - run:
          name: Rustfmt
          command: cargo fmt -- --check
      - restore_mantle_build
      - run:
          name: Build mantle-build
          command: stat target/debug/mantle-build || cargo build -p mantle-build
      - install_mantle_build
      - save_cache:
          key: mantle-build-{{ checksum "mantle-build.sums" }}
          paths:
            - target/debug/mantle-build
      - run:
          name: Unit test
          command: cargo test

  clippy:
    executor: rust
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Clippy
          command: |
            (rustup component add clippy && cargo clippy --all-features -- -D clippy::all) || true

  wasm_build:
    executor: rust
    steps:
      - checkout
      - run:
          name: Wasm build
          command: cargo build --target wasm32-unknown-unknown --all-features -p memchain -p bcfs

  build_standalone_examples:
    executor: rust
    steps:
      - checkout
      - restore_mantle_build
      - run:
          name: cargo build
          command: |
            RUSTC_WRAPPER=mantle-build cargo build --target=wasm32-wasi \
              -p ballot \
              -p erc20 \
              -p hello-world \
              -p messaging \
              -p sealed-auctions

  test_idl:
    executor: rust
    steps:
      - checkout
      - restore_mantle_build
      - run:
          name: Test IDL generation
          working_directory: tests/idl-gen
          command: cargo build --target wasm32-wasi --bins && cargo test --lib

  test_imports:
    executor: rust
    steps:
      - checkout
      - restore_mantle_build
      - run:
          name: Build dependency
          working_directory: tests/xcc-b
          command: cargo build --target wasm32-wasi --bins
      - run:
          name: Build toplevel
          working_directory: tests/xcc-a
          command: cargo build --target wasm32-wasi --bins && cargo test --lib

  docker_build:
    executor: docker_builder
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:pending .
          working_directory: .circleci/docker
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
      - docker_push:
          tag: pending

  update_linux_toolstate:
    executor: rust_pending
    steps:
      - update_toolstate

  update_macos_toolstate:
    environment:
      PATH: /Users/distiller/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      LD_LIBRARY_PATH: /Users/distiller/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib
    macos:
      xcode: "10.0.0"
    steps:
      - run:
          name: Install Rust
          command: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly
      - run:
          name: Install AWS CLI
          command: pip install awscli
      - checkout
      - update_toolstate

  docker_publish:
    executor: docker_builder
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Tag image with latest
          command: docker tag $IMAGE_NAME:pending $IMAGE_NAME:latest
      - docker_push:
          tag: latest


workflows:
  version: 2

  test:
    jobs:
      - init
      - clippy
      - wasm_build
      - test_idl:
          requires:
            - init
      - test_imports:
          requires:
            - init
      - build_standalone_examples:
          requires:
            - init

  nightly:
    triggers:
      - schedule:
          cron: "0 14 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - docker_build
      - update_linux_toolstate:
          requires:
            - docker_build
      - update_macos_toolstate
      - docker_publish:
          requires:
            - update_linux_toolstate
